from statistics import mean


class Student:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.finished_courses = []
        self.courses_in_progress = []
        self.grades = {}

    def add_courses(self, status, *courses):
        for c in courses:
            if status == 'progress':
                self.courses_in_progress.append(c)
            elif status == 'finished':
                self.finished_courses.append(c)

    # функция собирает оценки лекторов от студентов
    def feedback(self, lecturer, course, grade):
        if isinstance(lecturer, Lecturer) and course in self.courses_in_progress and course in lecturer.course_attached:
            lecturer.student_feedback.setdefault(course, [])
            lecturer.student_feedback[course] += [grade]
        else:
            return 'Что-то не так1'

    # функция считает среднюю оценку студента
    def average_rating(self):
        av_rate = []
        for value in self.grades.values():
            av_rate += value
        return mean(av_rate)

    # вывод данных о студенте для задания 3
    def __str__(self):
        row = f"Имя: {self.name}\n"
        row += f"Фамилия: {self.surname}\n"
        row += f"Средняя оценка за домашние задания: {self.average_rating()}\n"
        row += f"Курсы в процессе изучения: {', '.join(self.courses_in_progress)}\n"
        row += f"Завершенные курсы: {', '.join(self.finished_courses)}"
        return row

    # сравниваем лекторов по средней оценке и студентов по средней оценке
    def __lt__(self, other):
        if not isinstance(other, Lecturer):
            return 'He is not a Lecturer'
        return self.average_rating() < other.average_feedback()

    def __gt__(self, other):
        if not isinstance(other, Lecturer):
            return 'He is not a Lecturer'
        return self.average_rating() > other.average_feedback()


# класс всех преподавателей
class Mentor:
    def __init__(self, name, surname):
        self.name = name
        self.surname = surname
        self.course_attached = []


# класс лекторов
class Lecturer(Mentor):
    def __init__(self, name, surname):
        super().__init__(name, surname)
        self.student_feedback = {}

    # расчет средней оценки по отзывам студентов
    def average_feedback(self):
        av_fb_list = []
        for value in self.student_feedback.values():
            av_fb_list += value
        return mean(av_fb_list)

    # вывод данных о лекторе
    def __str__(self):
        row = f"Имя:  {self.name}\n"
        row += f"Фамилия: {self.surname}\n"
        row += f"Средняя оценка за лекции: {self.average_feedback()}"
        return row


# класс проверяющих
class Reviewer(Mentor):
    # вывод данных о проверяющем
    def __str__(self):
        row = f"Имя: {self.name}\n"
        row += f"Фамилия: {self.surname}"
        return row

    # ревьюер ставит оценки студентам
    def grade_homework(self, student, course, grade):
        if isinstance(student, Student) and course in self.course_attached and course in student.courses_in_progress:
            student.grades.setdefault(course, [])
            student.grades[course] += [grade]
        else:
            return 'Что-то не так3'


# средние оценки студентов на каком-то курсе
def average_rating_students(course, *students):
    list_s = []
    for student in students:
        marks = student.grades.get(course)
        if marks:
            list_s.extend(marks)  # list_s += marks
    return mean(list_s)  # len(list_s) / sum(list_s)


# средние оценки лекторов на каком-то курсе
def average_feedback_lecturers(course, *lecturers):
    list_l = []
    for lecturer in lecturers:
        marks = lecturer.student_feedback.get(course)
        if marks:
            list_l.extend(marks)
    return mean(list_l)


# наши студенты
student_1 = Student('Alice', 'Abad')
student_2 = Student('Bob', 'Backer')

# что изучают
student_1.add_courses('progress', 'Python', 'Deduction')
# student_1.courses_in_progress += ['Python', 'Deduction']
student_2.courses_in_progress += ['Python', 'Deduction']

# что закончили
# student_1.finished_courses += ['Digital start']
student_1.add_courses('finished', 'Digital start')
student_2.finished_courses += ['Digital start']

# наши лекторы
lecturer_1 = Lecturer('Sherlock', 'Holmes')
lecturer_2 = Lecturer('John', 'Watson')

# что ведут лекторы
lecturer_1.course_attached += ['Python', 'Deduction']
lecturer_2.course_attached += ['Python', 'Deduction']

# оценки студентов для лекторов
student_1.feedback(lecturer_1, "Python", 9)
student_1.feedback(lecturer_2, "Python", 9)
student_1.feedback(lecturer_1, "Deduction", 10)
student_1.feedback(lecturer_2, "Deduction", 9)
student_2.feedback(lecturer_1, "Python", 9)
student_2.feedback(lecturer_2, "Python", 10)
student_2.feedback(lecturer_1, "Deduction", 10)
student_2.feedback(lecturer_2, "Deduction", 10)

# наши проверяющие
reviewer_1 = Reviewer('Camilla', 'Cabello')
reviewer_2 = Reviewer('Dan', 'Django')

# ревьюеры проверяют курсы
reviewer_1.course_attached += ['Python', 'Deduction', 'Digital start']
reviewer_2.course_attached += ['Python', 'Deduction']

# ревьюеры ставят оценки
reviewer_1.grade_homework(student_1, 'Python', 9)
reviewer_1.grade_homework(student_1, 'Python', 8)
reviewer_2.grade_homework(student_2, 'Python', 10)
reviewer_2.grade_homework(student_2, 'Python', 9)
reviewer_1.grade_homework(student_1, 'Deduction', 10)
reviewer_1.grade_homework(student_1, 'Deduction', 10)
reviewer_2.grade_homework(student_2, 'Deduction', 9)
reviewer_2.grade_homework(student_2, 'Deduction', 8)


# задание 2
print(f"{student_1.name} получил(а) следующие оценки: {student_1.grades}")
print(f"{lecturer_1.name} получил оценки {lecturer_1.student_feedback}")

# Задание_3
print(reviewer_1)
print(lecturer_1)
print(student_1)

print(student_1 < lecturer_1)
print(student_1 > lecturer_1)

# Задание_4
course = "Deduction"
print(average_rating_students(course, student_1, student_2))
print(average_feedback_lecturers(course, lecturer_1, lecturer_2))
